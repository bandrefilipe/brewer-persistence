###################################################################################################
# Datasource
###################################################################################################

# Spring Datasource
spring.datasource.url=jdbc:h2:mem:brewer-db
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# This property controls the default auto-commit behavior of connections returned from the pool. It
# is a boolean value. Default: true
spring.datasource.hikari.autoCommit=true

# This property controls the maximum number of milliseconds that a client (that's you) will wait
# for a connection from the pool. If this time is exceeded without a connection becoming available,
# a SQLException will be thrown. Lowest acceptable connection timeout is 250 ms. Default: 30000
# (30 seconds)
spring.datasource.hikari.connectionTimeout=30000

# This property controls the maximum amount of time that a connection is allowed to sit idle in the
# pool. THIS SETTING ONLY APPLIES WHEN minimumIdle IS DEFINED TO BE LESS THAN maximumPoolSize. Idle
# connections will not be retired once the pool reaches minimumIdle connections. Whether a
# connection is retired as idle or not is subject to a maximum variation of +30 seconds, and
# average variation of +15 seconds. A connection will never be retired as idle before this timeout.
# A value of 0 means that idle connections are never removed from the pool. The minimum allowed
# value is 10000ms (10 seconds). Default: 600000 (10 minutes)
spring.datasource.hikari.idleTimeout=600000

# This property controls the maximum lifetime of a connection in the pool. An in-use connection
# will never be retired, only when it is closed will it then be removed. On a connection-by-
# connection basis, minor negative attenuation is applied to avoid mass-extinction in the pool. We
# strongly recommend setting this value, and it should be several seconds shorter than any database
# or infrastructure imposed connection time limit. A value of 0 indicates no maximum lifetime
# (infinite lifetime), subject of course to the idleTimeout setting. Default: 1800000 (30 minutes)
spring.datasource.hikari.maxLifetime=1800000

# This property controls the minimum number of idle connections that HikariCP tries to maintain in
# the pool. If the idle connections dip below this value and total connections in the pool are less
# than maximumPoolSize, HikariCP will make a best effort to add additional connections quickly and
# efficiently. However, for maximum performance and responsiveness to spike demands, we recommend
# not setting this value and instead allowing HikariCP to act as a fixed size connection pool.
# Default: same as maximumPoolSize
spring.datasource.hikari.minimumIdle=${spring.datasource.hikari.maximumPoolSize:10}

# This property controls the maximum size that the pool is allowed to reach, including both idle
# and in-use connections. Basically this value will determine the maximum number of actual
# connections to the database backend. A reasonable value for this is best determined by your
# execution environment. When the pool reaches this size, and no idle connections are available,
# calls to getConnection() will block for up to connectionTimeout milliseconds before timing out.
# Please read about pool sizing. Default: 10
spring.datasource.hikari.maximumPoolSize=10

# This property represents a user-defined name for the connection pool and appears mainly in
# logging and JMX management consoles to identify pools and pool configurations. Default: auto-
# generated
spring.datasource.hikari.poolName=${spring.application.name}-cp

# Spring JPA
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.format_sql=true

# Spring H2
spring.h2.console.enabled=true
spring.h2.console.path=/h2
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=false

###################################################################################################
# Logging
###################################################################################################

# Logs the SQL queries (its formatting is influenced by the hibernate.format_sql property)
logging.level.org.hibernate.SQL=DEBUG

# Logs the prepared statements' parameters
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

logging.level.bandrefilipe.brewer.persistence=DEBUG
